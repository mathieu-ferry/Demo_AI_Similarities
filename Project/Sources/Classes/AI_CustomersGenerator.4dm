property customerExpectedSchema : Object
property systemPrompt : Text
property customerGenBot : cs.AIKit.OpenAIChatHelper
property responseData : Text
property UICallback_onProgress : 4D.Function
property UICallback_onTerminate : 4D.Function
property generated : Integer
property alreadyThere : Integer
property quantityBy : Integer
property quantity : Integer
property failedAttempts : Integer
property maxFailedAttempts : Integer
property startMillisecond : Integer
property timing : Integer

Class extends AI_Agent

singleton Class constructor()
	Super()
	
	var $addressExpectedSchema : Object
	var $customerExpectedSchema : Object
	var $customerColExpectedSchema : Collection
	
	This.responseData:=""
	$addressExpectedSchema:={streetNumber: "number as string"; streetName: "street name"; apartment: "number as string"; building: "building"; poBox: "po box"; city: "city"; region: "region"; postalCode: "postal code as string"; country: "country"}
	$customerExpectedSchema:={firstname: "firstname"; lastname: "lastname"; email: "firstname.lastname@randomdomain.com"; phone: "random phone number as string"; address: $addressExpectedSchema}
	$customerColExpectedSchema:=[$customerExpectedSchema]
	
	This.systemPrompt:="You are a data generating assistant. Your answers are used to populate a database. Your answers are stricly JSON formatted, no greetings, no conclusion, just pure json."+\
		"You always generate a **json array** of customer objects (records) to populate a customer table. "+\
		"I will just ask you to generate a certain amount of records, and you always provide me the answer as a **json array**. "+\
		"These data will be used to demo similarities detection features in my app. So it would be nice to have a few similar records, but not identical.  "+\
		"So do your best to generate mostly unique records, but some of them can share similarities with others (such as similar firstnames or lastnames, typos in addresses or emails)  "+\
		"The json array must have the following schema, here provided for 1 customer: "+JSON Stringify($customerColExpectedSchema)+". "+\
		"avoid generic names like john doe, prefer realistic ones. "+\
		"avoid generic email domains like example.com, prefer realistic ones."+\
		"While  not all address attributes are mandatory, a general rule for an address to be valid is:\n"+\
		"*- streetName AND(streetNumber OR building OR poBox)\n"+\
		"*- city\n"+\
		"*- postalCode\n"+\
		"*- country"
	
Function onStreamChatReceive($result : cs.AIKit.OpenAIChatCompletionsResult)
	var $AIResponse : Object
	var $item : Object
	var $customer : cs.customerEntity
	var $prompt : Text
	var $toGenerate : Integer
	var $me:=cs.AI_CustomersGenerator.me
	var $timingPerCustomer : Integer
	
	If ($result.success)
		If ($result.terminated)
			$me.UICallback_onProgress.call(Form; "\n\nAI response completed\n")
			$AIResponse:=$me.getAIStructuredResponseFromText($me.responseData; Is collection)
			
			If ($AIResponse.success)
				For each ($item; $AIResponse.response)
					$customer:=ds.customer.newCustomerFromObject($item)
					$customer.save()
				End for each 
			Else   //bad format generated by AI
				$me.failedAttempts+=1
				$me.UICallback_onProgress.call(Form; "AI did not respond with the expected format.\n")
			End if 
			
			$me.generated:=ds.customer.all().length-$me.alreadyThere
			If (($me.generated<$me.quantity) && ($me.failedAttempts<$me.maxFailedAttempts))
				$me.prompt()
			Else   //all customers are generated or too many failed attempts
				$me.timing:=Milliseconds-$me.startMillisecond
				$me.UICallback_onProgress.call(Form; String($me.generated)+" customers generated in "+String($me.timing)+" ms. \n")
				If ($me.generated>0)
					$me.UICallback_onProgress.call(Form; String(Int($me.timing/$me.generated))+" ms per customer\n")
				End if 
				$me.UICallback_onTerminate.call(Form)
			End if 
			
		Else   //$result.terminated = false
			$me.responseData+=$result.choice.delta.text
			$me.UICallback_onProgress.call(Form; $result.choice.delta.text)
		End if 
		
	Else   //$result.success = false
		throw(999; "Problem querying AI provider, please try again")
	End if 
	
Function prompt()
	var $prompt : Text
	var $toGenerate : Integer
	var $progress : Object
	
	This.responseData:=""
	$progress:={value: Int(This.generated/This.quantity*100); message: "Generating customers "+String(This.generated)+"/"+String(This.quantity)}
	$toGenerate:=(This.quantityBy<(This.quantity-This.generated)) ? This.quantityBy : (This.quantity-This.generated)
	$prompt:="generate "+String($toGenerate)+" customers"
	This.UICallback_onProgress.call(Form; "Prompt : "+$prompt+"\n\n"; {value: 0; message: "Generating customers 0/"+String(This.quantity)})
	This.customerGenBot.prompt($prompt)
	
	
Function generateCustomersAsync($quantity : Integer; $quantityBy : Integer; $callback : Object)
	var $options : cs.AIKit.OpenAIChatCompletionsParameters
	
	This.generated:=0
	This.quantity:=$quantity
	This.quantityBy:=$quantityBy
	This.responseData:=""
	This.failedAttempts:=0
	This.maxFailedAttempts:=3
	This.alreadyThere:=ds.customer.all().length
	This.UICallback_onProgress:=$callback.onProgress
	This.UICallback_onTerminate:=$callback.onTerminate
	This.startMillisecond:=Milliseconds
	
	$options:=cs.AIKit.OpenAIChatCompletionsParameters.new()
	$options.stream:=True
	$options.formula:=This.onStreamChatReceive
	$options.model:=This.model
	
	This.customerGenBot:=This.AIClient.chat.create(This.systemPrompt; $options)
	This.UICallback_onProgress.call(Form; "System prompt : "+This.systemPrompt+"\n\n")
	
	This.prompt()